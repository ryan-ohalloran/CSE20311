Ryan O'Halloran - CSE 20311
Lab5
report.txt on mysayings.c

From the user's perspective, mysayings.c is a pretty simple program. The program begins by prompting the user for the name of a startup file (mine is named startup.dat) containing a list of sayings. If the user enters the name of a file that does not exist, the program displays an appropriate message, then exits. If the filename is valid, the program proceeds into a list of options for the user. The user can select to view all the sayings in the current database, add a new saying to the database (and subsequently the startup file), list all sayings that contain a certain word or part of a word specified by the user, save all sayings into a new text file named by the user, or quit. If the user doesn't choose one of these 5 options, the program accounts for the user error and displays an appropriate message. Once the user has chosen to quit the program, a good-bye message is displayed, and the program exits. 

Internally, the program begins by asking the user to enter a filename. A file pointer with that name is created, and if no file with such a name exists and the pointer is NULL, main returns 1 and the program exits. A 2D array of chars is then declared, which will be used to store all sayings in the startup file. The max length of each saying, max number of sayings, and max length of the filename are all defined at the beginning of the program to make it easier to adjust their values later on, if necessary. The program consists of several functions, each associated with I/O operations or performing user-specified tasks. The primary part of the program relies upon a while loop with a switch statement inside. Depending on which task the user chooses to do, the switch statement executes said task accordingly. Again, each of these tasks is executed by a function in order to make main much cleaner. If the user selects 4, and chooses to create a new file, a new file pointer is opened and a new text file created. In that case, if the user were to enter a filename with a space, any characters after the space would not be included in the name, but the .txt would still be appended to the end of the file name. Otherwise, all operation is done within the startup's file pointer and main program. Once the user chooses to quit, the while loop's flag is set to false and the loop exits, thus ending the user's interaction with that instance of the program. The switch statement accounts for improper entry by hav the default convey an "INVALID ENTRY" message to the user. 

I verified that the output of my program was correct by doing a lot of guessing and checking. I added a number of different sayings to the startup file, and each entered in perfectly well. I tested out the display all sayings option after adding a new saying, and that new saying was still displayed. I experimented with different text file output names, and they all outputted text files perfectly fine. I made sure that if the user entered a number that wasn't 1, 2, 3, 4, or 5, the program would display an invalid entry message. I double-checked the option to show all sayings containing a specific word or combination of letters, and that did in fact display all sayings with the specification. Other than all that, I just generally ran through the program a number of times, selecting different options at different points throughout, and never ran into any errors, signaling to me that the program functions exactly as I intended it to.