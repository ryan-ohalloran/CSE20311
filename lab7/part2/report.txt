Ryan O'Halloran
CSE 20311
Lab 7 - Report

From the user's perspective this program is pretty straightforward. The user can choose to run the executable without another command line argument - if they choose to run the program like this, they will be prompted to enter the filename of the CSV being analyzed. The user can also choose to run the executable with another command line argument of the CSV file - this method immediately enters them into the main part of the program. In the main part of the program, the user is able to choose between 7 unique options. The seventh option is to quit and the other six are to perform various operations and display relevant information for the CSV file. I won't get into what each of these options are - because they are very self-explanatory to the user in what they do - but they do exactly as the user would expect, and they let the user know if they enter something incorrectly.

Internally, this program operates based on the amount of command line arguments. If there is only 1, the user is prompted to enter a filename, which is then assigned to a file pointer. If there are 2, the second argument is assigned to a file pointer. If there are any more than that, the switch statement these rely upon defaults and tells the user they entered too many command line arguments. If the file the user entered does not exist, the pointer returns NULL and the user is told their fie does not exist. Once the file is opened and assigned a file pointer, the program reads and counts the number of states in the CSV file. There is then a while loop which runs until the user enters 7 (the number required to quit), after which the bool "isRunning" is set to false and the program exits. The user's choice (an integer "uChoice") determines which of the actions the program chooses to run. A switch statement is invoked for the value of uChoice, and this statement will run continuously until the user chooses to exit. The program accounts for improper user entry for all cases - as long as the user makes an honest mistake (and doesn't just button mash on the keyboard) the program will let the user know their mistake and allow them to retry. 

I verified this program's accuracy by testing all the options of each switch statement, checking to make sure all choices worked to plan. I also looked at the CSV file itself and made sure everything the program was saying made sense, and in each case, it did. There really isn't a ton that I necessarily needed to verify in regards to this program, but everything that I did, worked out. I also tested improper input for all cases needing input, and as long as the user made an honest mistake, it all worked perfectly well.