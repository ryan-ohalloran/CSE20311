From the user's perspective, menucalc.c is rather simple. The user is prompted with 5 choices upon running: adding two numbers, subtracting two numbers, multiplying two numbers, dividing two numbers, or exiting the program. The user enters a number corresponding to one of these options. If the user selects any number from 1-4, they will then be asked to enter two numbers. The program then acts on these numbers according to which operation the user specified at the beginning. The program then displays the numbers entered and the result of their operation. After this, the user is again prompted with the 5 choices from before. If at any time during the operation selection the user enter 5, the program will exit and display a message telling the user "by-bye."

The program runs off several functions and a central while loop within main. The boolean isRunning controls the while loop and determines whether the calculator is to continue to run or not. isRunning remains true until the user chooses to exit, at which point it is set to false and the while loop ends. There is a function (print_options) that prints the 5 options available to the user. Another function (get_choice) asks the user for their choice from the 5 options and returns that choice. Each operation - addition, subtraction, multiplication, and division - each get a simple function to perform their respective operations. The function perform_operation reads into which option the user selected with a switch statement and performs the calls the function for the specified operation to return the needed value. The last function, displayInputs, tells the user which two numbers they chose to operate on and sets up a line preceding the display of the actual operation (which is printed in perform_operation). The program continually runs until the user selects to exit.

It was very easy to verify the output of my program. I just used an actual calculator and tested out a variety of number combinations and operations, and each one gave me the same answer as my calculator. I made sure the program ran continually and exited when told to, and everything else aligned with how I intended.